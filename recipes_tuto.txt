in bashrc:
=========
set C2RAWDIR to /home/yjung/P_cr2res/2019_07_22_LAB_DATA
set C2STATCALDIR to /home/yjung/P_cr2res/cr2re/cr2re-calib
set C2SRCDIR to /home/yjung/P_cr2res/cr2re/cr2rep

usec2 ; cd /home/yjung/P_cr2res/2019_07_31_demo

###
### Detlin
###
# DETLIN -> BPM, DETLIN_COEFFS
esorex --mem-check=TRUE cr2res_cal_detlin cr2res_cal_detlin.sof

cd Y12

###
### Dark
###
# DARK -> BPM, MASTER_DARK
esorex --mem-check=TRUE cr2res_cal_dark cr2res_cal_dark.sof

###
### Flatfield / Tracing
###
# FLAT -> TW, EXTRACT_1D, SLIT_MODEL, SLIT_FUNC, BPM, MASTER_FLAT
esorex --mem-check=TRUE cr2res_cal_flat cr2res_cal_flat.sof

# FLAT -> CALIBRATED
esorex --mem-check=TRUE cr2res_util_calib cr2res_util_calib.sof
# CALIBRATED -> TW
esorex --mem-check=TRUE cr2res_util_trace cr2res_util_trace.sof
# CALIBRATED, TW -> EXTRACT_1D, SLIT_MODEL, SLIT_FUNC
esorex --mem-check=TRUE cr2res_util_extract cr2res_util_extract.sof
# CALIBRATED, SLIT_MODEL -> BPM, MASTER_FLAT
esorex --mem-check=TRUE  cr2res_util_normflat cr2res_util_normflat.sof

###
### Wavelength Calibration
###
# WAVE, EMISSION_LINES -> WAVE_MAP, TW
esorex --mem-check=TRUE cr2res_cal_wave cr2res_cal_wave.sof

# WAVE -> CALIBRATED
esorex --mem-check=TRUE cr2res_util_calib cr2res_util_calib2.sof
# CALIBRATED, TW -> EXTRACT_1D, SLIT_MODEL, SLIT_FUNC
esorex --mem-check=TRUE cr2res_util_extract cr2res_util_extract2.sof
# EXTRACT_1D, TW, EMISSION_LINES -> WAVE_MAP, TW
esorex --mem-check=TRUE cr2res_util_wave cr2res_util_wave.sof

###
### Compute the Slit curvature
###
# TW -> SLIT_CURV_MAP, SLIT_CURV, TW
esorex --mem-check=TRUE cr2res_util_slit_curv cr2res_util_slit_curv.sof 

###
### Recompute the Extraction / Wavelength calibration
###
# CALIBRATED, TW -> EXTRACT_1D, SLIT_MODEL, SLIT_FUNC

### Core dump
esorex --mem-check=TRUE cr2res_util_extract cr2res_util_extract3.sof

# EXTRACT_1D, TW, EMISSION_LINES -> WAVE_MAP, TW
TODO : esorex --mem-check=TRUE cr2res_util_wave cr2res_util_wave2.sof
























cd ../J12

###
### Nodding Observation
###
# TODO
esorex --mem-check=TRUE cr2res_obs_nodding cr2res_obs_nodding.sof 

###
### Polarimetry Observation
###
# TODO
esorex --mem-check=TRUE cr2res_obs_pol cr2res_obs_pol.sof

###
### 2D Observation
###
# TODO
esorex --mem-check=TRUE cr2res_obs_2d cr2res_obs_2d.sof

###
### Various utilities
###
esorex --mem-check=TRUE cr2res_util_genlines cr2res_util_genlines.sof 
esorex --mem-check=TRUE cr2res_util_bpm_split cr2res_util_bpm_split.sof
esorex --mem-check=TRUE cr2res_util_trace_map cr2res_util_trace_map.sof

# TODO
esorex --mem-check=TRUE cr2res_util_plot



TODO : other bands

cd ../





********************
* KEYWORDS Summary *
********************
Primary
HIERARCH ESO SEQ NODPOS         Nodding Position
HIERARCH ESO SEQ NODTHROW       Nodding Throw
HIERARCH ESO DET SEQ1 DIT       DIT
HIERARCH ESO DET NDIT           NDIT
HIERARCH ESO INS WLEN ID        Setting
HIERARCH ESO INS OPTI8 NO       Decker

Extension
HIERARCH ESO INS WLEN CENY<N>   Y pixel position at center of order N
HIERARCH ESO INS WLEN BEGIN<N>  Start WL for order N
HIERARCH ESO INS WLEN END<N>    End WL for order N

********************
* Classification   *
********************
    Use always setting for the matching
    Slit width might be use to get the wavelength calibration / flat
    Generic offset template is reduced with cr2res_obs_2d

******
* QC *
******
    See QC dictionary in cr2rec/dic/ESO-DFS-DIC.CR2RE_QC

****************
***   TODO   ***
****************

* BPM handling : Cleaning vs attaching it (special handling in cr2res_util_extract)

*  Check why Slit model has both 0s and NANs between orders
* Add a cr2res_util_bpm_merge

* cr2res_cal_detlin 
    In cr2res_detlin_compute(), add the error                   TM
    QC fit_quality                                              YJ/TM
    Write cr2res_qc_detlin_gain()                               TM
    Write cr2res_qc_detlin_min_max_level()                      TM
    Pass the proper input to cr2res_qc_detlin_min_max_level()   YJ
    Should accept a BPM as input to merge to the output (like the flat recipe)

* cr2res_cal_dark *
    Check the passed ron value (compare with old CRIRES) to cr2res_detector_shotnoise_model()   YJ
    Check the gain default value                                                                YJ
    Should accept a BPM as input to merge to the output (like the flat recipe)

* cr2res_cal_flat *
    Implement Cosmics correction                        TM
    Detlin correction does not work                     YJ
    cr2res_qc_flat_lamp_ints()                          YJ/TM
    cr2res_qc_flat_mean_level()                         YJ/TM
    cr2res_qc_flat_mean_med_flux()                      YJ/TM
    cr2res_qc_flat_med_snr()                            YJ/TM
    cr2res_qc_flat_nb_overexposed()                     YJ/TM
    cr2res_qc_flat_trace_center_y()                     YJ/TM

* cr2res_util_trace *
    Implement and call cr2res_trace_split_traces()      YJ/TM

* cr2res_util_calib *
    Detlin correction does not work                     YJ
    Implement Cosmics correction                        TM

* cr2res_util_extract *
    Add documentation in cr2res_trace_new_slit_fraction() header

* cr2res_obs_nodding *
    - Add QCs

* cr2res_obs_2d *
    - Add QCs

* cr2res_obs_pol *
    cr2res_pol_sort_frames()
    cr2res_pol_spec_pol_merge()
    Add QCs : median value of the null spectrum
    Lib-func for selecting the traceNB for given decker based on slit_frac.

**********
*  TODO  *        
**********
* cr2res_util_plot *
* cr2res_util_splice *
